1. 减少 http 请求
2. 防抖节流：防抖：一定的时间间隔内，只有最后一次操作有效（先检测有无 timeId，有的话就清除定时器，继续新建一个）；
			节流：一段时间内，只执行一次
	const debounce = (fn, delay) => { // 一般用于实时查询，频繁提交表单，以最后一次结果为准
		let timeId = null
		return () => {
			if (timeId) clearTimeOut(timeId)
			setTimeOut((fn, delay)
		}
	}
	
	const throttle = (fn, delay) => { // 一般用于发请求，防止频繁发请求
		let prev = Date.now()
		return () => {
			if (Date.now() - prev >= delay) {
				fn()
				prev = Date.now()
			}
		}
	}
3. 合并请求（雪碧图）
4. 利用缓存 e-tag last-modify cache-control(max-age expires)
5. 合理利用客户端缓存
6. 静态资源放cdn(让用户访问最近的节点，以及可以从缓存中读取资源)
7. gzip 压缩代码
8. 动态引入组件 import、图片懒加载
9. 代码分割，10Mb 的文件拆分为多个 3Mb * n
10. 服务端渲染
11. script 放后面，加 defer，异步加载，等渲染后再执行，不会阻塞html渲染，async 在执行阶段会阻塞，加载也是异步
12. 避免回流操作，减少对 DOM 的操作
